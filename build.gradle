apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'

group = 'com.swrve'
version = '1.0'
ext.packaging = 'jar'

// see http://jedicoder.blogspot.ie/2011/11/automated-gradle-project-deployment-to.html
def isDevBuild
def isCiBuild
def isReleaseBuild
def sonatypeRepositoryUrl

//set build variables based on build type (release, continuous integration, development)
if(hasProperty("release")) {
    isReleaseBuild = true
    sonatypeRepositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
} else if (hasProperty("ci")) {
    isCiBuild = true
    version += "-SNAPSHOT"
    sonatypeRepositoryUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
} else {
    isDevBuild = true
}

sourceCompatibility = 1.6

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.7'
    compile group: 'joda-time', name: 'joda-time', version: '2.3'
    compile group: 'com.google.guava', name: 'guava', version: '15.0'
    compile group: 'findbugs', name: 'annotations', version: '1.0.0'
    compile group: 'com.google.code.findbugs', name: 'jsr305', version: '2.0.2'

    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.2'

}

// ---------------------------------------------------------------------------

apply plugin: 'findbugs'

// http://www.gradle.org/docs/current/dsl/org.gradle.api.plugins.quality.FindBugsExtension.html
findbugs {
    toolVersion = "2.0.3"
    effort = "max"
    reportLevel = "high"
    ignoreFailures = false
    ext.maxHeapSize = "200m"
}
tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true // gimme something I can read!
    }
}

// checking test classes for FindBugs isn't all that useful
findbugsTest.enabled = false

// ---------------------------------------------------------------------------

apply plugin: 'jacoco'

task all(dependsOn: [
        test, findbugsMain, jacocoTestReport
    ]) << { }

// ---------------------------------------------------------------------------

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar
    archives sourcesJar
}

if(isReleaseBuild) {
    signing {
        sign configurations.archives
    }
} else {
    task signArchives {
        // do nothing
    }
}

uploadArchives {
    repositories {
        if (isDevBuild) {
            mavenLocal()
        }
        else {
            mavenDeployer {
                if(isReleaseBuild) {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                }

                repository(url: sonatypeRepositoryUrl) {
                  authentication(userName: sonatypeUsername, password: sonatypePassword)
                }

                pom.project {
                   name 'RateLimitedLogger'
                   packaging 'jar'
                   description 'RateLimitedLogger is an SLF4J-compatible, simple, fluent API for rate-limited logging in Java'
                   url 'https://github.com/Swrve/rate-limited-logger/'

                   scm {
                       url 'scm:git@github.com:Swrve/rate-limited-logger.git'
                       connection 'scm:git@github.com:Swrve/rate-limited-logger.git'
                       developerConnection 'scm:git@github.com:Swrve/rate-limited-logger.git'
                   }

                   licenses {
                       license {
                           name 'The Apache Software License, Version 2.0'
                           url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                           distribution 'repo'
                       }
                   }

                   developers {
                       developer {
                           id 'jmason'
                           name 'Justin Mason'
                           organization 'Swrve'
                           organizationUrl 'http://www.swrve.com/'
                       }
                   }
               }
            }
        }
    }
}
